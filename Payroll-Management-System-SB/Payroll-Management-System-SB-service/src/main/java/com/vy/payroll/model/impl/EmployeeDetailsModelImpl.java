/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vy.payroll.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.vy.payroll.model.EmployeeDetails;
import com.vy.payroll.model.EmployeeDetailsImageBlobModel;
import com.vy.payroll.model.EmployeeDetailsModel;
import com.vy.payroll.model.EmployeeDetailsSoap;
import com.vy.payroll.service.EmployeeDetailsLocalServiceUtil;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmployeeDetails service. Represents a row in the &quot;emp_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EmployeeDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeDetailsImpl
 * @see EmployeeDetails
 * @see EmployeeDetailsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EmployeeDetailsModelImpl extends BaseModelImpl<EmployeeDetails>
	implements EmployeeDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee details model instance should use the {@link EmployeeDetails} interface instead.
	 */
	public static final String TABLE_NAME = "emp_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eno", Types.BIGINT },
			{ "eid", Types.VARCHAR },
			{ "eName", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "password_", Types.VARCHAR },
			{ "gender", Types.VARCHAR },
			{ "mobileNo", Types.INTEGER },
			{ "panCardNo", Types.VARCHAR },
			{ "adharCardNo", Types.BIGINT },
			{ "uanNo", Types.BIGINT },
			{ "dob", Types.TIMESTAMP },
			{ "doj", Types.TIMESTAMP },
			{ "designation", Types.VARCHAR },
			{ "role", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "qualificationS", Types.VARCHAR },
			{ "image", Types.BLOB }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("eno", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("eid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobileNo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("panCardNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("adharCardNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uanNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("doj", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("designation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("role", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qualificationS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("image", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE = "create table emp_details (eno LONG not null primary key,eid VARCHAR(75) null,eName VARCHAR(75) null,email VARCHAR(75) null,password_ VARCHAR(75) null,gender VARCHAR(75) null,mobileNo INTEGER,panCardNo VARCHAR(75) null,adharCardNo LONG,uanNo LONG,dob DATE null,doj DATE null,designation VARCHAR(75) null,role VARCHAR(75) null,address VARCHAR(75) null,qualificationS VARCHAR(75) null,image BLOB)";
	public static final String TABLE_SQL_DROP = "drop table emp_details";
	public static final String ORDER_BY_JPQL = " ORDER BY employeeDetails.eno ASC";
	public static final String ORDER_BY_SQL = " ORDER BY emp_details.eno ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vy.payroll.model.EmployeeDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vy.payroll.model.EmployeeDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.vy.payroll.model.EmployeeDetails"),
			true);
	public static final long EMAIL_COLUMN_BITMASK = 1L;
	public static final long PASSWORD_COLUMN_BITMASK = 2L;
	public static final long ENO_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmployeeDetails toModel(EmployeeDetailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmployeeDetails model = new EmployeeDetailsImpl();

		model.setEno(soapModel.getEno());
		model.setEid(soapModel.getEid());
		model.setEName(soapModel.getEName());
		model.setEmail(soapModel.getEmail());
		model.setPassword(soapModel.getPassword());
		model.setGender(soapModel.getGender());
		model.setMobileNo(soapModel.getMobileNo());
		model.setPanCardNo(soapModel.getPanCardNo());
		model.setAdharCardNo(soapModel.getAdharCardNo());
		model.setUanNo(soapModel.getUanNo());
		model.setDob(soapModel.getDob());
		model.setDoj(soapModel.getDoj());
		model.setDesignation(soapModel.getDesignation());
		model.setRole(soapModel.getRole());
		model.setAddress(soapModel.getAddress());
		model.setQualificationS(soapModel.getQualificationS());
		model.setImage(soapModel.getImage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmployeeDetails> toModels(
		EmployeeDetailsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmployeeDetails> models = new ArrayList<EmployeeDetails>(soapModels.length);

		for (EmployeeDetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.vy.payroll.service.util.ServiceProps.get(
				"lock.expiration.time.com.vy.payroll.model.EmployeeDetails"));

	public EmployeeDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eno;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEno(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eno;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeDetails.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eno", getEno());
		attributes.put("eid", getEid());
		attributes.put("eName", getEName());
		attributes.put("email", getEmail());
		attributes.put("password", getPassword());
		attributes.put("gender", getGender());
		attributes.put("mobileNo", getMobileNo());
		attributes.put("panCardNo", getPanCardNo());
		attributes.put("adharCardNo", getAdharCardNo());
		attributes.put("uanNo", getUanNo());
		attributes.put("dob", getDob());
		attributes.put("doj", getDoj());
		attributes.put("designation", getDesignation());
		attributes.put("role", getRole());
		attributes.put("address", getAddress());
		attributes.put("qualificationS", getQualificationS());
		attributes.put("image", getImage());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eno = (Long)attributes.get("eno");

		if (eno != null) {
			setEno(eno);
		}

		String eid = (String)attributes.get("eid");

		if (eid != null) {
			setEid(eid);
		}

		String eName = (String)attributes.get("eName");

		if (eName != null) {
			setEName(eName);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		Integer mobileNo = (Integer)attributes.get("mobileNo");

		if (mobileNo != null) {
			setMobileNo(mobileNo);
		}

		String panCardNo = (String)attributes.get("panCardNo");

		if (panCardNo != null) {
			setPanCardNo(panCardNo);
		}

		Long adharCardNo = (Long)attributes.get("adharCardNo");

		if (adharCardNo != null) {
			setAdharCardNo(adharCardNo);
		}

		Long uanNo = (Long)attributes.get("uanNo");

		if (uanNo != null) {
			setUanNo(uanNo);
		}

		Date dob = (Date)attributes.get("dob");

		if (dob != null) {
			setDob(dob);
		}

		Date doj = (Date)attributes.get("doj");

		if (doj != null) {
			setDoj(doj);
		}

		String designation = (String)attributes.get("designation");

		if (designation != null) {
			setDesignation(designation);
		}

		String role = (String)attributes.get("role");

		if (role != null) {
			setRole(role);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String qualificationS = (String)attributes.get("qualificationS");

		if (qualificationS != null) {
			setQualificationS(qualificationS);
		}

		Blob image = (Blob)attributes.get("image");

		if (image != null) {
			setImage(image);
		}
	}

	@JSON
	@Override
	public long getEno() {
		return _eno;
	}

	@Override
	public void setEno(long eno) {
		_eno = eno;
	}

	@JSON
	@Override
	public String getEid() {
		if (_eid == null) {
			return "";
		}
		else {
			return _eid;
		}
	}

	@Override
	public void setEid(String eid) {
		_eid = eid;
	}

	@JSON
	@Override
	public String getEName() {
		if (_eName == null) {
			return "";
		}
		else {
			return _eName;
		}
	}

	@Override
	public void setEName(String eName) {
		_eName = eName;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_columnBitmask |= EMAIL_COLUMN_BITMASK;

		if (_originalEmail == null) {
			_originalEmail = _email;
		}

		_email = email;
	}

	public String getOriginalEmail() {
		return GetterUtil.getString(_originalEmail);
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_columnBitmask |= PASSWORD_COLUMN_BITMASK;

		if (_originalPassword == null) {
			_originalPassword = _password;
		}

		_password = password;
	}

	public String getOriginalPassword() {
		return GetterUtil.getString(_originalPassword);
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public int getMobileNo() {
		return _mobileNo;
	}

	@Override
	public void setMobileNo(int mobileNo) {
		_mobileNo = mobileNo;
	}

	@JSON
	@Override
	public String getPanCardNo() {
		if (_panCardNo == null) {
			return "";
		}
		else {
			return _panCardNo;
		}
	}

	@Override
	public void setPanCardNo(String panCardNo) {
		_panCardNo = panCardNo;
	}

	@JSON
	@Override
	public long getAdharCardNo() {
		return _adharCardNo;
	}

	@Override
	public void setAdharCardNo(long adharCardNo) {
		_adharCardNo = adharCardNo;
	}

	@JSON
	@Override
	public long getUanNo() {
		return _uanNo;
	}

	@Override
	public void setUanNo(long uanNo) {
		_uanNo = uanNo;
	}

	@JSON
	@Override
	public Date getDob() {
		return _dob;
	}

	@Override
	public void setDob(Date dob) {
		_dob = dob;
	}

	@JSON
	@Override
	public Date getDoj() {
		return _doj;
	}

	@Override
	public void setDoj(Date doj) {
		_doj = doj;
	}

	@JSON
	@Override
	public String getDesignation() {
		if (_designation == null) {
			return "";
		}
		else {
			return _designation;
		}
	}

	@Override
	public void setDesignation(String designation) {
		_designation = designation;
	}

	@JSON
	@Override
	public String getRole() {
		if (_role == null) {
			return "";
		}
		else {
			return _role;
		}
	}

	@Override
	public void setRole(String role) {
		_role = role;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getQualificationS() {
		if (_qualificationS == null) {
			return "";
		}
		else {
			return _qualificationS;
		}
	}

	@Override
	public void setQualificationS(String qualificationS) {
		_qualificationS = qualificationS;
	}

	@JSON
	@Override
	public Blob getImage() {
		if (_imageBlobModel == null) {
			try {
				_imageBlobModel = EmployeeDetailsLocalServiceUtil.getImageBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_imageBlobModel != null) {
			blob = _imageBlobModel.getImageBlob();
		}

		return blob;
	}

	@Override
	public void setImage(Blob image) {
		if (_imageBlobModel == null) {
			_imageBlobModel = new EmployeeDetailsImageBlobModel(getPrimaryKey(),
					image);
		}
		else {
			_imageBlobModel.setImageBlob(image);
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmployeeDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmployeeDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeDetailsImpl employeeDetailsImpl = new EmployeeDetailsImpl();

		employeeDetailsImpl.setEno(getEno());
		employeeDetailsImpl.setEid(getEid());
		employeeDetailsImpl.setEName(getEName());
		employeeDetailsImpl.setEmail(getEmail());
		employeeDetailsImpl.setPassword(getPassword());
		employeeDetailsImpl.setGender(getGender());
		employeeDetailsImpl.setMobileNo(getMobileNo());
		employeeDetailsImpl.setPanCardNo(getPanCardNo());
		employeeDetailsImpl.setAdharCardNo(getAdharCardNo());
		employeeDetailsImpl.setUanNo(getUanNo());
		employeeDetailsImpl.setDob(getDob());
		employeeDetailsImpl.setDoj(getDoj());
		employeeDetailsImpl.setDesignation(getDesignation());
		employeeDetailsImpl.setRole(getRole());
		employeeDetailsImpl.setAddress(getAddress());
		employeeDetailsImpl.setQualificationS(getQualificationS());

		employeeDetailsImpl.resetOriginalValues();

		return employeeDetailsImpl;
	}

	@Override
	public int compareTo(EmployeeDetails employeeDetails) {
		long primaryKey = employeeDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmployeeDetails)) {
			return false;
		}

		EmployeeDetails employeeDetails = (EmployeeDetails)obj;

		long primaryKey = employeeDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EmployeeDetailsModelImpl employeeDetailsModelImpl = this;

		employeeDetailsModelImpl._originalEmail = employeeDetailsModelImpl._email;

		employeeDetailsModelImpl._originalPassword = employeeDetailsModelImpl._password;

		employeeDetailsModelImpl._imageBlobModel = null;

		employeeDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeDetails> toCacheModel() {
		EmployeeDetailsCacheModel employeeDetailsCacheModel = new EmployeeDetailsCacheModel();

		employeeDetailsCacheModel.eno = getEno();

		employeeDetailsCacheModel.eid = getEid();

		String eid = employeeDetailsCacheModel.eid;

		if ((eid != null) && (eid.length() == 0)) {
			employeeDetailsCacheModel.eid = null;
		}

		employeeDetailsCacheModel.eName = getEName();

		String eName = employeeDetailsCacheModel.eName;

		if ((eName != null) && (eName.length() == 0)) {
			employeeDetailsCacheModel.eName = null;
		}

		employeeDetailsCacheModel.email = getEmail();

		String email = employeeDetailsCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			employeeDetailsCacheModel.email = null;
		}

		employeeDetailsCacheModel.password = getPassword();

		String password = employeeDetailsCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			employeeDetailsCacheModel.password = null;
		}

		employeeDetailsCacheModel.gender = getGender();

		String gender = employeeDetailsCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			employeeDetailsCacheModel.gender = null;
		}

		employeeDetailsCacheModel.mobileNo = getMobileNo();

		employeeDetailsCacheModel.panCardNo = getPanCardNo();

		String panCardNo = employeeDetailsCacheModel.panCardNo;

		if ((panCardNo != null) && (panCardNo.length() == 0)) {
			employeeDetailsCacheModel.panCardNo = null;
		}

		employeeDetailsCacheModel.adharCardNo = getAdharCardNo();

		employeeDetailsCacheModel.uanNo = getUanNo();

		Date dob = getDob();

		if (dob != null) {
			employeeDetailsCacheModel.dob = dob.getTime();
		}
		else {
			employeeDetailsCacheModel.dob = Long.MIN_VALUE;
		}

		Date doj = getDoj();

		if (doj != null) {
			employeeDetailsCacheModel.doj = doj.getTime();
		}
		else {
			employeeDetailsCacheModel.doj = Long.MIN_VALUE;
		}

		employeeDetailsCacheModel.designation = getDesignation();

		String designation = employeeDetailsCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			employeeDetailsCacheModel.designation = null;
		}

		employeeDetailsCacheModel.role = getRole();

		String role = employeeDetailsCacheModel.role;

		if ((role != null) && (role.length() == 0)) {
			employeeDetailsCacheModel.role = null;
		}

		employeeDetailsCacheModel.address = getAddress();

		String address = employeeDetailsCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			employeeDetailsCacheModel.address = null;
		}

		employeeDetailsCacheModel.qualificationS = getQualificationS();

		String qualificationS = employeeDetailsCacheModel.qualificationS;

		if ((qualificationS != null) && (qualificationS.length() == 0)) {
			employeeDetailsCacheModel.qualificationS = null;
		}

		return employeeDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{eno=");
		sb.append(getEno());
		sb.append(", eid=");
		sb.append(getEid());
		sb.append(", eName=");
		sb.append(getEName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", mobileNo=");
		sb.append(getMobileNo());
		sb.append(", panCardNo=");
		sb.append(getPanCardNo());
		sb.append(", adharCardNo=");
		sb.append(getAdharCardNo());
		sb.append(", uanNo=");
		sb.append(getUanNo());
		sb.append(", dob=");
		sb.append(getDob());
		sb.append(", doj=");
		sb.append(getDoj());
		sb.append(", designation=");
		sb.append(getDesignation());
		sb.append(", role=");
		sb.append(getRole());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", qualificationS=");
		sb.append(getQualificationS());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.vy.payroll.model.EmployeeDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eno</column-name><column-value><![CDATA[");
		sb.append(getEno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eid</column-name><column-value><![CDATA[");
		sb.append(getEid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eName</column-name><column-value><![CDATA[");
		sb.append(getEName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobileNo</column-name><column-value><![CDATA[");
		sb.append(getMobileNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>panCardNo</column-name><column-value><![CDATA[");
		sb.append(getPanCardNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adharCardNo</column-name><column-value><![CDATA[");
		sb.append(getAdharCardNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uanNo</column-name><column-value><![CDATA[");
		sb.append(getUanNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dob</column-name><column-value><![CDATA[");
		sb.append(getDob());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>doj</column-name><column-value><![CDATA[");
		sb.append(getDoj());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designation</column-name><column-value><![CDATA[");
		sb.append(getDesignation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>role</column-name><column-value><![CDATA[");
		sb.append(getRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>qualificationS</column-name><column-value><![CDATA[");
		sb.append(getQualificationS());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EmployeeDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EmployeeDetails.class, ModelWrapper.class
		};
	private long _eno;
	private String _eid;
	private String _eName;
	private String _email;
	private String _originalEmail;
	private String _password;
	private String _originalPassword;
	private String _gender;
	private int _mobileNo;
	private String _panCardNo;
	private long _adharCardNo;
	private long _uanNo;
	private Date _dob;
	private Date _doj;
	private String _designation;
	private String _role;
	private String _address;
	private String _qualificationS;
	private EmployeeDetailsImageBlobModel _imageBlobModel;
	private long _columnBitmask;
	private EmployeeDetails _escapedModel;
}