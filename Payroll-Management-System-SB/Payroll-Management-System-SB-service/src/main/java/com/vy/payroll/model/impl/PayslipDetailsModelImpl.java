/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vy.payroll.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.vy.payroll.model.PayslipDetails;
import com.vy.payroll.model.PayslipDetailsModel;
import com.vy.payroll.model.PayslipDetailsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PayslipDetails service. Represents a row in the &quot;payslip_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PayslipDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PayslipDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PayslipDetailsImpl
 * @see PayslipDetails
 * @see PayslipDetailsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PayslipDetailsModelImpl extends BaseModelImpl<PayslipDetails>
	implements PayslipDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a payslip details model instance should use the {@link PayslipDetails} interface instead.
	 */
	public static final String TABLE_NAME = "payslip_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ctcId", Types.BIGINT },
			{ "ctc", Types.INTEGER },
			{ "hra", Types.INTEGER },
			{ "ma", Types.INTEGER },
			{ "ca", Types.INTEGER },
			{ "ta", Types.INTEGER },
			{ "pf", Types.INTEGER },
			{ "sa", Types.INTEGER },
			{ "incomeTax", Types.INTEGER },
			{ "netSalary", Types.INTEGER },
			{ "month", Types.INTEGER },
			{ "eid", Types.VARCHAR },
			{ "basicSalary", Types.INTEGER },
			{ "proffesionalTax", Types.INTEGER },
			{ "TaxablAmt", Types.INTEGER },
			{ "gratuity", Types.INTEGER },
			{ "grossSalary", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ctcId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ctc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("hra", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ma", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ca", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ta", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("pf", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sa", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("incomeTax", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("netSalary", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("month", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("eid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("basicSalary", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("proffesionalTax", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("TaxablAmt", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("gratuity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("grossSalary", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table payslip_details (ctcId LONG not null primary key,ctc INTEGER,hra INTEGER,ma INTEGER,ca INTEGER,ta INTEGER,pf INTEGER,sa INTEGER,incomeTax INTEGER,netSalary INTEGER,month INTEGER,eid VARCHAR(75) null,basicSalary INTEGER,proffesionalTax INTEGER,TaxablAmt INTEGER,gratuity INTEGER,grossSalary INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table payslip_details";
	public static final String ORDER_BY_JPQL = " ORDER BY payslipDetails.ctcId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY payslip_details.ctcId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vy.payroll.model.PayslipDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vy.payroll.model.PayslipDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.vy.payroll.model.PayslipDetails"),
			true);
	public static final long EID_COLUMN_BITMASK = 1L;
	public static final long MONTH_COLUMN_BITMASK = 2L;
	public static final long CTCID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PayslipDetails toModel(PayslipDetailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PayslipDetails model = new PayslipDetailsImpl();

		model.setCtcId(soapModel.getCtcId());
		model.setCtc(soapModel.getCtc());
		model.setHra(soapModel.getHra());
		model.setMa(soapModel.getMa());
		model.setCa(soapModel.getCa());
		model.setTa(soapModel.getTa());
		model.setPf(soapModel.getPf());
		model.setSa(soapModel.getSa());
		model.setIncomeTax(soapModel.getIncomeTax());
		model.setNetSalary(soapModel.getNetSalary());
		model.setMonth(soapModel.getMonth());
		model.setEid(soapModel.getEid());
		model.setBasicSalary(soapModel.getBasicSalary());
		model.setProffesionalTax(soapModel.getProffesionalTax());
		model.setTaxablAmt(soapModel.getTaxablAmt());
		model.setGratuity(soapModel.getGratuity());
		model.setGrossSalary(soapModel.getGrossSalary());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PayslipDetails> toModels(PayslipDetailsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PayslipDetails> models = new ArrayList<PayslipDetails>(soapModels.length);

		for (PayslipDetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.vy.payroll.service.util.ServiceProps.get(
				"lock.expiration.time.com.vy.payroll.model.PayslipDetails"));

	public PayslipDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ctcId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCtcId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ctcId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PayslipDetails.class;
	}

	@Override
	public String getModelClassName() {
		return PayslipDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ctcId", getCtcId());
		attributes.put("ctc", getCtc());
		attributes.put("hra", getHra());
		attributes.put("ma", getMa());
		attributes.put("ca", getCa());
		attributes.put("ta", getTa());
		attributes.put("pf", getPf());
		attributes.put("sa", getSa());
		attributes.put("incomeTax", getIncomeTax());
		attributes.put("netSalary", getNetSalary());
		attributes.put("month", getMonth());
		attributes.put("eid", getEid());
		attributes.put("basicSalary", getBasicSalary());
		attributes.put("proffesionalTax", getProffesionalTax());
		attributes.put("TaxablAmt", getTaxablAmt());
		attributes.put("gratuity", getGratuity());
		attributes.put("grossSalary", getGrossSalary());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ctcId = (Long)attributes.get("ctcId");

		if (ctcId != null) {
			setCtcId(ctcId);
		}

		Integer ctc = (Integer)attributes.get("ctc");

		if (ctc != null) {
			setCtc(ctc);
		}

		Integer hra = (Integer)attributes.get("hra");

		if (hra != null) {
			setHra(hra);
		}

		Integer ma = (Integer)attributes.get("ma");

		if (ma != null) {
			setMa(ma);
		}

		Integer ca = (Integer)attributes.get("ca");

		if (ca != null) {
			setCa(ca);
		}

		Integer ta = (Integer)attributes.get("ta");

		if (ta != null) {
			setTa(ta);
		}

		Integer pf = (Integer)attributes.get("pf");

		if (pf != null) {
			setPf(pf);
		}

		Integer sa = (Integer)attributes.get("sa");

		if (sa != null) {
			setSa(sa);
		}

		Integer incomeTax = (Integer)attributes.get("incomeTax");

		if (incomeTax != null) {
			setIncomeTax(incomeTax);
		}

		Integer netSalary = (Integer)attributes.get("netSalary");

		if (netSalary != null) {
			setNetSalary(netSalary);
		}

		Integer month = (Integer)attributes.get("month");

		if (month != null) {
			setMonth(month);
		}

		String eid = (String)attributes.get("eid");

		if (eid != null) {
			setEid(eid);
		}

		Integer basicSalary = (Integer)attributes.get("basicSalary");

		if (basicSalary != null) {
			setBasicSalary(basicSalary);
		}

		Integer proffesionalTax = (Integer)attributes.get("proffesionalTax");

		if (proffesionalTax != null) {
			setProffesionalTax(proffesionalTax);
		}

		Integer TaxablAmt = (Integer)attributes.get("TaxablAmt");

		if (TaxablAmt != null) {
			setTaxablAmt(TaxablAmt);
		}

		Integer gratuity = (Integer)attributes.get("gratuity");

		if (gratuity != null) {
			setGratuity(gratuity);
		}

		Integer grossSalary = (Integer)attributes.get("grossSalary");

		if (grossSalary != null) {
			setGrossSalary(grossSalary);
		}
	}

	@JSON
	@Override
	public long getCtcId() {
		return _ctcId;
	}

	@Override
	public void setCtcId(long ctcId) {
		_ctcId = ctcId;
	}

	@JSON
	@Override
	public int getCtc() {
		return _ctc;
	}

	@Override
	public void setCtc(int ctc) {
		_ctc = ctc;
	}

	@JSON
	@Override
	public int getHra() {
		return _hra;
	}

	@Override
	public void setHra(int hra) {
		_hra = hra;
	}

	@JSON
	@Override
	public int getMa() {
		return _ma;
	}

	@Override
	public void setMa(int ma) {
		_ma = ma;
	}

	@JSON
	@Override
	public int getCa() {
		return _ca;
	}

	@Override
	public void setCa(int ca) {
		_ca = ca;
	}

	@JSON
	@Override
	public int getTa() {
		return _ta;
	}

	@Override
	public void setTa(int ta) {
		_ta = ta;
	}

	@JSON
	@Override
	public int getPf() {
		return _pf;
	}

	@Override
	public void setPf(int pf) {
		_pf = pf;
	}

	@JSON
	@Override
	public int getSa() {
		return _sa;
	}

	@Override
	public void setSa(int sa) {
		_sa = sa;
	}

	@JSON
	@Override
	public int getIncomeTax() {
		return _incomeTax;
	}

	@Override
	public void setIncomeTax(int incomeTax) {
		_incomeTax = incomeTax;
	}

	@JSON
	@Override
	public int getNetSalary() {
		return _netSalary;
	}

	@Override
	public void setNetSalary(int netSalary) {
		_netSalary = netSalary;
	}

	@JSON
	@Override
	public int getMonth() {
		return _month;
	}

	@Override
	public void setMonth(int month) {
		_columnBitmask |= MONTH_COLUMN_BITMASK;

		if (!_setOriginalMonth) {
			_setOriginalMonth = true;

			_originalMonth = _month;
		}

		_month = month;
	}

	public int getOriginalMonth() {
		return _originalMonth;
	}

	@JSON
	@Override
	public String getEid() {
		if (_eid == null) {
			return "";
		}
		else {
			return _eid;
		}
	}

	@Override
	public void setEid(String eid) {
		_columnBitmask |= EID_COLUMN_BITMASK;

		if (_originalEid == null) {
			_originalEid = _eid;
		}

		_eid = eid;
	}

	public String getOriginalEid() {
		return GetterUtil.getString(_originalEid);
	}

	@JSON
	@Override
	public int getBasicSalary() {
		return _basicSalary;
	}

	@Override
	public void setBasicSalary(int basicSalary) {
		_basicSalary = basicSalary;
	}

	@JSON
	@Override
	public int getProffesionalTax() {
		return _proffesionalTax;
	}

	@Override
	public void setProffesionalTax(int proffesionalTax) {
		_proffesionalTax = proffesionalTax;
	}

	@JSON
	@Override
	public int getTaxablAmt() {
		return _TaxablAmt;
	}

	@Override
	public void setTaxablAmt(int TaxablAmt) {
		_TaxablAmt = TaxablAmt;
	}

	@JSON
	@Override
	public int getGratuity() {
		return _gratuity;
	}

	@Override
	public void setGratuity(int gratuity) {
		_gratuity = gratuity;
	}

	@JSON
	@Override
	public int getGrossSalary() {
		return _grossSalary;
	}

	@Override
	public void setGrossSalary(int grossSalary) {
		_grossSalary = grossSalary;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PayslipDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PayslipDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PayslipDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PayslipDetailsImpl payslipDetailsImpl = new PayslipDetailsImpl();

		payslipDetailsImpl.setCtcId(getCtcId());
		payslipDetailsImpl.setCtc(getCtc());
		payslipDetailsImpl.setHra(getHra());
		payslipDetailsImpl.setMa(getMa());
		payslipDetailsImpl.setCa(getCa());
		payslipDetailsImpl.setTa(getTa());
		payslipDetailsImpl.setPf(getPf());
		payslipDetailsImpl.setSa(getSa());
		payslipDetailsImpl.setIncomeTax(getIncomeTax());
		payslipDetailsImpl.setNetSalary(getNetSalary());
		payslipDetailsImpl.setMonth(getMonth());
		payslipDetailsImpl.setEid(getEid());
		payslipDetailsImpl.setBasicSalary(getBasicSalary());
		payslipDetailsImpl.setProffesionalTax(getProffesionalTax());
		payslipDetailsImpl.setTaxablAmt(getTaxablAmt());
		payslipDetailsImpl.setGratuity(getGratuity());
		payslipDetailsImpl.setGrossSalary(getGrossSalary());

		payslipDetailsImpl.resetOriginalValues();

		return payslipDetailsImpl;
	}

	@Override
	public int compareTo(PayslipDetails payslipDetails) {
		long primaryKey = payslipDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PayslipDetails)) {
			return false;
		}

		PayslipDetails payslipDetails = (PayslipDetails)obj;

		long primaryKey = payslipDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PayslipDetailsModelImpl payslipDetailsModelImpl = this;

		payslipDetailsModelImpl._originalMonth = payslipDetailsModelImpl._month;

		payslipDetailsModelImpl._setOriginalMonth = false;

		payslipDetailsModelImpl._originalEid = payslipDetailsModelImpl._eid;

		payslipDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PayslipDetails> toCacheModel() {
		PayslipDetailsCacheModel payslipDetailsCacheModel = new PayslipDetailsCacheModel();

		payslipDetailsCacheModel.ctcId = getCtcId();

		payslipDetailsCacheModel.ctc = getCtc();

		payslipDetailsCacheModel.hra = getHra();

		payslipDetailsCacheModel.ma = getMa();

		payslipDetailsCacheModel.ca = getCa();

		payslipDetailsCacheModel.ta = getTa();

		payslipDetailsCacheModel.pf = getPf();

		payslipDetailsCacheModel.sa = getSa();

		payslipDetailsCacheModel.incomeTax = getIncomeTax();

		payslipDetailsCacheModel.netSalary = getNetSalary();

		payslipDetailsCacheModel.month = getMonth();

		payslipDetailsCacheModel.eid = getEid();

		String eid = payslipDetailsCacheModel.eid;

		if ((eid != null) && (eid.length() == 0)) {
			payslipDetailsCacheModel.eid = null;
		}

		payslipDetailsCacheModel.basicSalary = getBasicSalary();

		payslipDetailsCacheModel.proffesionalTax = getProffesionalTax();

		payslipDetailsCacheModel.TaxablAmt = getTaxablAmt();

		payslipDetailsCacheModel.gratuity = getGratuity();

		payslipDetailsCacheModel.grossSalary = getGrossSalary();

		return payslipDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{ctcId=");
		sb.append(getCtcId());
		sb.append(", ctc=");
		sb.append(getCtc());
		sb.append(", hra=");
		sb.append(getHra());
		sb.append(", ma=");
		sb.append(getMa());
		sb.append(", ca=");
		sb.append(getCa());
		sb.append(", ta=");
		sb.append(getTa());
		sb.append(", pf=");
		sb.append(getPf());
		sb.append(", sa=");
		sb.append(getSa());
		sb.append(", incomeTax=");
		sb.append(getIncomeTax());
		sb.append(", netSalary=");
		sb.append(getNetSalary());
		sb.append(", month=");
		sb.append(getMonth());
		sb.append(", eid=");
		sb.append(getEid());
		sb.append(", basicSalary=");
		sb.append(getBasicSalary());
		sb.append(", proffesionalTax=");
		sb.append(getProffesionalTax());
		sb.append(", TaxablAmt=");
		sb.append(getTaxablAmt());
		sb.append(", gratuity=");
		sb.append(getGratuity());
		sb.append(", grossSalary=");
		sb.append(getGrossSalary());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.vy.payroll.model.PayslipDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ctcId</column-name><column-value><![CDATA[");
		sb.append(getCtcId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ctc</column-name><column-value><![CDATA[");
		sb.append(getCtc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hra</column-name><column-value><![CDATA[");
		sb.append(getHra());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ma</column-name><column-value><![CDATA[");
		sb.append(getMa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ca</column-name><column-value><![CDATA[");
		sb.append(getCa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ta</column-name><column-value><![CDATA[");
		sb.append(getTa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pf</column-name><column-value><![CDATA[");
		sb.append(getPf());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sa</column-name><column-value><![CDATA[");
		sb.append(getSa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>incomeTax</column-name><column-value><![CDATA[");
		sb.append(getIncomeTax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netSalary</column-name><column-value><![CDATA[");
		sb.append(getNetSalary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>month</column-name><column-value><![CDATA[");
		sb.append(getMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eid</column-name><column-value><![CDATA[");
		sb.append(getEid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basicSalary</column-name><column-value><![CDATA[");
		sb.append(getBasicSalary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proffesionalTax</column-name><column-value><![CDATA[");
		sb.append(getProffesionalTax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TaxablAmt</column-name><column-value><![CDATA[");
		sb.append(getTaxablAmt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gratuity</column-name><column-value><![CDATA[");
		sb.append(getGratuity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossSalary</column-name><column-value><![CDATA[");
		sb.append(getGrossSalary());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PayslipDetails.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PayslipDetails.class, ModelWrapper.class
		};
	private long _ctcId;
	private int _ctc;
	private int _hra;
	private int _ma;
	private int _ca;
	private int _ta;
	private int _pf;
	private int _sa;
	private int _incomeTax;
	private int _netSalary;
	private int _month;
	private int _originalMonth;
	private boolean _setOriginalMonth;
	private String _eid;
	private String _originalEid;
	private int _basicSalary;
	private int _proffesionalTax;
	private int _TaxablAmt;
	private int _gratuity;
	private int _grossSalary;
	private long _columnBitmask;
	private PayslipDetails _escapedModel;
}