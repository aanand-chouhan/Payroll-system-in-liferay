/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vy.payroll.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.vy.payroll.model.AdvanceSalaryRecord;
import com.vy.payroll.model.AdvanceSalaryRecordModel;
import com.vy.payroll.model.AdvanceSalaryRecordSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AdvanceSalaryRecord service. Represents a row in the &quot;advance_salary_records&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AdvanceSalaryRecordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdvanceSalaryRecordImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AdvanceSalaryRecordImpl
 * @see AdvanceSalaryRecord
 * @see AdvanceSalaryRecordModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AdvanceSalaryRecordModelImpl extends BaseModelImpl<AdvanceSalaryRecord>
	implements AdvanceSalaryRecordModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a advance salary record model instance should use the {@link AdvanceSalaryRecord} interface instead.
	 */
	public static final String TABLE_NAME = "advance_salary_records";
	public static final Object[][] TABLE_COLUMNS = {
			{ "request_id", Types.INTEGER },
			{ "eid", Types.VARCHAR },
			{ "reason", Types.VARCHAR },
			{ "is_checked", Types.VARCHAR },
			{ "date_", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("request_id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("eid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("is_checked", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table advance_salary_records (request_id INTEGER not null primary key,eid VARCHAR(75) null,reason VARCHAR(75) null,is_checked VARCHAR(75) null,date_ DATE null)";
	public static final String TABLE_SQL_DROP = "drop table advance_salary_records";
	public static final String ORDER_BY_JPQL = " ORDER BY advanceSalaryRecord.request_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY advance_salary_records.request_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vy.payroll.model.AdvanceSalaryRecord"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vy.payroll.model.AdvanceSalaryRecord"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.vy.payroll.model.AdvanceSalaryRecord"),
			true);
	public static final long IS_CHECKED_COLUMN_BITMASK = 1L;
	public static final long REQUEST_ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AdvanceSalaryRecord toModel(AdvanceSalaryRecordSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AdvanceSalaryRecord model = new AdvanceSalaryRecordImpl();

		model.setRequest_id(soapModel.getRequest_id());
		model.setEid(soapModel.getEid());
		model.setReason(soapModel.getReason());
		model.setIs_checked(soapModel.getIs_checked());
		model.setDate(soapModel.getDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AdvanceSalaryRecord> toModels(
		AdvanceSalaryRecordSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AdvanceSalaryRecord> models = new ArrayList<AdvanceSalaryRecord>(soapModels.length);

		for (AdvanceSalaryRecordSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.vy.payroll.service.util.ServiceProps.get(
				"lock.expiration.time.com.vy.payroll.model.AdvanceSalaryRecord"));

	public AdvanceSalaryRecordModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _request_id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setRequest_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _request_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AdvanceSalaryRecord.class;
	}

	@Override
	public String getModelClassName() {
		return AdvanceSalaryRecord.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("request_id", getRequest_id());
		attributes.put("eid", getEid());
		attributes.put("reason", getReason());
		attributes.put("is_checked", getIs_checked());
		attributes.put("date", getDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer request_id = (Integer)attributes.get("request_id");

		if (request_id != null) {
			setRequest_id(request_id);
		}

		String eid = (String)attributes.get("eid");

		if (eid != null) {
			setEid(eid);
		}

		String reason = (String)attributes.get("reason");

		if (reason != null) {
			setReason(reason);
		}

		String is_checked = (String)attributes.get("is_checked");

		if (is_checked != null) {
			setIs_checked(is_checked);
		}

		Date date = (Date)attributes.get("date");

		if (date != null) {
			setDate(date);
		}
	}

	@JSON
	@Override
	public int getRequest_id() {
		return _request_id;
	}

	@Override
	public void setRequest_id(int request_id) {
		_request_id = request_id;
	}

	@JSON
	@Override
	public String getEid() {
		if (_eid == null) {
			return "";
		}
		else {
			return _eid;
		}
	}

	@Override
	public void setEid(String eid) {
		_eid = eid;
	}

	@JSON
	@Override
	public String getReason() {
		if (_reason == null) {
			return "";
		}
		else {
			return _reason;
		}
	}

	@Override
	public void setReason(String reason) {
		_reason = reason;
	}

	@JSON
	@Override
	public String getIs_checked() {
		if (_is_checked == null) {
			return "";
		}
		else {
			return _is_checked;
		}
	}

	@Override
	public void setIs_checked(String is_checked) {
		_columnBitmask |= IS_CHECKED_COLUMN_BITMASK;

		if (_originalIs_checked == null) {
			_originalIs_checked = _is_checked;
		}

		_is_checked = is_checked;
	}

	public String getOriginalIs_checked() {
		return GetterUtil.getString(_originalIs_checked);
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_date = date;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AdvanceSalaryRecord toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AdvanceSalaryRecord)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AdvanceSalaryRecordImpl advanceSalaryRecordImpl = new AdvanceSalaryRecordImpl();

		advanceSalaryRecordImpl.setRequest_id(getRequest_id());
		advanceSalaryRecordImpl.setEid(getEid());
		advanceSalaryRecordImpl.setReason(getReason());
		advanceSalaryRecordImpl.setIs_checked(getIs_checked());
		advanceSalaryRecordImpl.setDate(getDate());

		advanceSalaryRecordImpl.resetOriginalValues();

		return advanceSalaryRecordImpl;
	}

	@Override
	public int compareTo(AdvanceSalaryRecord advanceSalaryRecord) {
		int primaryKey = advanceSalaryRecord.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AdvanceSalaryRecord)) {
			return false;
		}

		AdvanceSalaryRecord advanceSalaryRecord = (AdvanceSalaryRecord)obj;

		int primaryKey = advanceSalaryRecord.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AdvanceSalaryRecordModelImpl advanceSalaryRecordModelImpl = this;

		advanceSalaryRecordModelImpl._originalIs_checked = advanceSalaryRecordModelImpl._is_checked;

		advanceSalaryRecordModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AdvanceSalaryRecord> toCacheModel() {
		AdvanceSalaryRecordCacheModel advanceSalaryRecordCacheModel = new AdvanceSalaryRecordCacheModel();

		advanceSalaryRecordCacheModel.request_id = getRequest_id();

		advanceSalaryRecordCacheModel.eid = getEid();

		String eid = advanceSalaryRecordCacheModel.eid;

		if ((eid != null) && (eid.length() == 0)) {
			advanceSalaryRecordCacheModel.eid = null;
		}

		advanceSalaryRecordCacheModel.reason = getReason();

		String reason = advanceSalaryRecordCacheModel.reason;

		if ((reason != null) && (reason.length() == 0)) {
			advanceSalaryRecordCacheModel.reason = null;
		}

		advanceSalaryRecordCacheModel.is_checked = getIs_checked();

		String is_checked = advanceSalaryRecordCacheModel.is_checked;

		if ((is_checked != null) && (is_checked.length() == 0)) {
			advanceSalaryRecordCacheModel.is_checked = null;
		}

		Date date = getDate();

		if (date != null) {
			advanceSalaryRecordCacheModel.date = date.getTime();
		}
		else {
			advanceSalaryRecordCacheModel.date = Long.MIN_VALUE;
		}

		return advanceSalaryRecordCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{request_id=");
		sb.append(getRequest_id());
		sb.append(", eid=");
		sb.append(getEid());
		sb.append(", reason=");
		sb.append(getReason());
		sb.append(", is_checked=");
		sb.append(getIs_checked());
		sb.append(", date=");
		sb.append(getDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.vy.payroll.model.AdvanceSalaryRecord");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>request_id</column-name><column-value><![CDATA[");
		sb.append(getRequest_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eid</column-name><column-value><![CDATA[");
		sb.append(getEid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reason</column-name><column-value><![CDATA[");
		sb.append(getReason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>is_checked</column-name><column-value><![CDATA[");
		sb.append(getIs_checked());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AdvanceSalaryRecord.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AdvanceSalaryRecord.class, ModelWrapper.class
		};
	private int _request_id;
	private String _eid;
	private String _reason;
	private String _is_checked;
	private String _originalIs_checked;
	private Date _date;
	private long _columnBitmask;
	private AdvanceSalaryRecord _escapedModel;
}