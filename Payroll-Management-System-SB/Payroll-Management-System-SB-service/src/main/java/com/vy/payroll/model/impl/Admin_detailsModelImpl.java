/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vy.payroll.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.vy.payroll.model.Admin_details;
import com.vy.payroll.model.Admin_detailsModel;
import com.vy.payroll.model.Admin_detailsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Admin_details service. Represents a row in the &quot;admin_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link Admin_detailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Admin_detailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Admin_detailsImpl
 * @see Admin_details
 * @see Admin_detailsModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class Admin_detailsModelImpl extends BaseModelImpl<Admin_details>
	implements Admin_detailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a admin_details model instance should use the {@link Admin_details} interface instead.
	 */
	public static final String TABLE_NAME = "admin_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "admin_id", Types.INTEGER },
			{ "userName", Types.VARCHAR },
			{ "password_", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("admin_id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table admin_details (admin_id INTEGER not null primary key,userName VARCHAR(75) null,password_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table admin_details";
	public static final String ORDER_BY_JPQL = " ORDER BY admin_details.admin_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY admin_details.admin_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vy.payroll.model.Admin_details"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vy.payroll.model.Admin_details"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.vy.payroll.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.vy.payroll.model.Admin_details"),
			true);
	public static final long PASSWORD_COLUMN_BITMASK = 1L;
	public static final long USERNAME_COLUMN_BITMASK = 2L;
	public static final long ADMIN_ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Admin_details toModel(Admin_detailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Admin_details model = new Admin_detailsImpl();

		model.setAdmin_id(soapModel.getAdmin_id());
		model.setUserName(soapModel.getUserName());
		model.setPassword(soapModel.getPassword());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Admin_details> toModels(Admin_detailsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Admin_details> models = new ArrayList<Admin_details>(soapModels.length);

		for (Admin_detailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.vy.payroll.service.util.ServiceProps.get(
				"lock.expiration.time.com.vy.payroll.model.Admin_details"));

	public Admin_detailsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _admin_id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setAdmin_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _admin_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Admin_details.class;
	}

	@Override
	public String getModelClassName() {
		return Admin_details.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("admin_id", getAdmin_id());
		attributes.put("userName", getUserName());
		attributes.put("password", getPassword());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer admin_id = (Integer)attributes.get("admin_id");

		if (admin_id != null) {
			setAdmin_id(admin_id);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}
	}

	@JSON
	@Override
	public int getAdmin_id() {
		return _admin_id;
	}

	@Override
	public void setAdmin_id(int admin_id) {
		_admin_id = admin_id;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_columnBitmask |= USERNAME_COLUMN_BITMASK;

		if (_originalUserName == null) {
			_originalUserName = _userName;
		}

		_userName = userName;
	}

	public String getOriginalUserName() {
		return GetterUtil.getString(_originalUserName);
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_columnBitmask |= PASSWORD_COLUMN_BITMASK;

		if (_originalPassword == null) {
			_originalPassword = _password;
		}

		_password = password;
	}

	public String getOriginalPassword() {
		return GetterUtil.getString(_originalPassword);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Admin_details toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Admin_details)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Admin_detailsImpl admin_detailsImpl = new Admin_detailsImpl();

		admin_detailsImpl.setAdmin_id(getAdmin_id());
		admin_detailsImpl.setUserName(getUserName());
		admin_detailsImpl.setPassword(getPassword());

		admin_detailsImpl.resetOriginalValues();

		return admin_detailsImpl;
	}

	@Override
	public int compareTo(Admin_details admin_details) {
		int primaryKey = admin_details.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Admin_details)) {
			return false;
		}

		Admin_details admin_details = (Admin_details)obj;

		int primaryKey = admin_details.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		Admin_detailsModelImpl admin_detailsModelImpl = this;

		admin_detailsModelImpl._originalUserName = admin_detailsModelImpl._userName;

		admin_detailsModelImpl._originalPassword = admin_detailsModelImpl._password;

		admin_detailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Admin_details> toCacheModel() {
		Admin_detailsCacheModel admin_detailsCacheModel = new Admin_detailsCacheModel();

		admin_detailsCacheModel.admin_id = getAdmin_id();

		admin_detailsCacheModel.userName = getUserName();

		String userName = admin_detailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			admin_detailsCacheModel.userName = null;
		}

		admin_detailsCacheModel.password = getPassword();

		String password = admin_detailsCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			admin_detailsCacheModel.password = null;
		}

		return admin_detailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{admin_id=");
		sb.append(getAdmin_id());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.vy.payroll.model.Admin_details");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>admin_id</column-name><column-value><![CDATA[");
		sb.append(getAdmin_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Admin_details.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Admin_details.class, ModelWrapper.class
		};
	private int _admin_id;
	private String _userName;
	private String _originalUserName;
	private String _password;
	private String _originalPassword;
	private long _columnBitmask;
	private Admin_details _escapedModel;
}